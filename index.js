// =================================================================
// =========== INICIO DE LA L√ìGICA DEL BOT DE TELEGRAM =============
// =================================================================

// ... (todo el c√≥digo de los comandos /start y /addboost se queda igual)

// =================================================================
// === CONFIGURACI√ìN DEL WEBHOOK Y ARRANQUE DEL SERVIDOR (MODIFICADO) ==
// =================================================================

// --- DIAGN√ìSTICO DE VARIABLES DE ENTORNO ---
console.log("--- DIAGNOSTICANDO VARIABLES DE TELEGRAM ---");
console.log(`RENDER_EXTERNAL_URL: ${process.env.RENDER_EXTERNAL_URL}`);
console.log(`TELEGRAM_BOT_TOKEN: ${process.env.TELEGRAM_BOT_TOKEN ? 'Presente (Oculto por seguridad)' : '!!! AUSENTE !!!'}`);
console.log(`TELEGRAM_SECRET_TOKEN: ${process.env.TELEGRAM_SECRET_TOKEN ? process.env.TELEGRAM_SECRET_TOKEN : '!!! AUSENTE !!!'}`);
console.log("-----------------------------------------");

// --- L√≥gica de arranque robusta ---
const startServer = async () => {
    try {
        // Asegur√©monos de que las variables cr√≠ticas existan antes de continuar
        if (!process.env.RENDER_EXTERNAL_URL || !process.env.TELEGRAM_SECRET_TOKEN || !process.env.TELEGRAM_BOT_TOKEN) {
            console.error("!!! ERROR CR√çTICO: Faltan una o m√°s variables de entorno de Telegram (URL, TOKEN o SECRET_TOKEN). Abortando arranque del webhook.");
            // A√∫n as√≠ arrancamos el servidor de API, pero el bot no funcionar√°.
            app.listen(PORT, () => {
                console.log(`Servidor API arrancado en el puerto ${PORT}, pero el BOT EST√Å INACTIVO por falta de variables.`);
            });
            return;
        }

        const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

        // ... (Pega aqu√≠ los handlers bot.command('start', ...) y bot.command('addboost', ...) que ya ten√≠as)
        // ...
        
        // --- COMANDO /start (P√∫blico para todos los usuarios) ---
        bot.command('start', (ctx) => {
            const welcomeMessage = `¬°Bienvenido a ATU Mining USDT! üöÄ\n\nPresiona el bot√≥n de abajo para iniciar la aplicaci√≥n y comenzar a minar.`;
            ctx.reply(welcomeMessage, {
                reply_markup: {
                    inline_keyboard: [[{ text: '‚õèÔ∏è Abrir App de Miner√≠a', web_app: { url: process.env.FRONTEND_URL } }]]
                }
            });
        });

        // --- COMANDO /addboost (Solo para Administradores) ---
        bot.command('addboost', async (ctx) => {
            const adminIds = (process.env.ADMIN_TELEGRAM_IDS || '').split(',');
            const userId = ctx.from.id.toString();
            if (!adminIds.includes(userId)) {
                return ctx.reply('‚ùå Acceso denegado. Este comando es solo para administradores.');
            }
            const parts = ctx.message.text.split(' ');
            if (parts.length !== 4) {
                return ctx.reply('Formato incorrecto. Uso: /addboost <ID_TELEGRAM_USUARIO> <ID_BOOST> <CANTIDAD>');
            }
            const targetUserId = parts[1];
            const boostId = parts[2].toUpperCase();
            const quantity = parseInt(parts[3], 10);
            if (isNaN(quantity) || quantity <= 0) {
                return ctx.reply('La cantidad debe ser un n√∫mero positivo.');
            }
            try {
                const targetUser = await User.findOne({ telegramId: targetUserId });
                if (!targetUser) {
                    return ctx.reply(`‚ùå Error: No se encontr√≥ un usuario con el ID de Telegram ${targetUserId}.`);
                }
                await boostService.addBoostToUser(targetUser._id, boostId, quantity);
                ctx.reply(`‚úÖ ¬°√âxito! Se a√±adieron ${quantity} boost(s) de tipo "${boostId}" al usuario con ID de Telegram ${targetUserId}.`);
            } catch (error) {
                console.error(`Error en comando /addboost:`, error);
                ctx.reply(`‚ùå Error al procesar el comando. Raz√≥n: ${error.message}`);
            }
        });

        const secretPath = `/telegraf/${bot.secretPathComponent()}`;
        
        // El middleware del webhook. Express lo usar√° para las peticiones de Telegram.
        app.use(await bot.createWebhook({ 
            domain: process.env.RENDER_EXTERNAL_URL,
            // Fallback por si la variable no se lee correctamente
            secret_token: process.env.TELEGRAM_SECRET_TOKEN 
        }));

        app.listen(PORT, () => {
            console.log(`Servidor corriendo en el puerto ${PORT}`);
            console.log(`Webhook configurado en el dominio: ${process.env.RENDER_EXTERNAL_URL}`);
            // NOTA: No podemos imprimir el secretPath final aqu√≠ porque se genera dentro de `createWebhook`
            // pero podemos estar seguros de que si las variables est√°n presentes, funcionar√°.
        });

    } catch (error) {
        console.error("Error catastr√≥fico durante el arranque del servidor:", error);
    }
};

startServer();